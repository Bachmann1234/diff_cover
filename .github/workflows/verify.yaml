name: PR Job
on: [push, pull_request, workflow_dispatch]

env:
  DEFAULT_PYTHON_VERSION: 3.12

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: Install uv
        run: pip install uv
      - name: Load cached venv
        id: cached-uv-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
      - name: Install dependencies
        if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'
        run: |
          uv venv .venv
          .venv/bin/uv pip install -e '.[dev,toml]'
      - name: ruff check
        continue-on-error: true
        run: .venv/bin/ruff check
      - name: ruff format
        continue-on-error: true
        run: .venv/bin/ruff check
      - name: pylint
        continue-on-error: true
        run: .venv/bin/pylint .
      - name: black
        run: .venv/bin/black --check .
      - name: isort
        run: .venv/bin/isort --check .
      - name: doc8
        run: .venv/bin/doc8 README.rst --ignore D001

  verify:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        run: pip install uv
      - name: Load cached venv
        id: cached-uv-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
      - name: Install dependencies
        if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'
        run: |
          uv venv .venv
          .venv/bin/uv pip install -e '.[dev,toml]'
      - name: Run tests
        run: |
          echo "ARTIFACT_NAME=coverage_${{ runner.os }}-py-${{ matrix.python-version }}" | sed 's|\\.\\*||g' >> "$GITHUB_ENV"
          .venv/bin/pytest -n auto --cov-context test --cov --cov-report=xml tests
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          if-no-files-found: error
          name: ${{ env.ARTIFACT_NAME }}
          path: .coverage
          retention-days: 1
      - run: echo "🍏 This job's status is ${{ job.status }}."

  coverage:
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: Install uv
        run: pip install uv
      - name: Load cached venv
        id: cached-uv-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
      - name: Install dependencies
        if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'
        run: |
          uv venv .venv
          .venv/bin/pip install -e '.[dev,toml]'
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
      - name: Clean up temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: coverage_*
      - name: Combine coverage.py
        run: |
          .venv/bin/coverage combine $(find downloaded_artifacts/ -type f | xargs)
          .venv/bin/coverage xml
          .venv/bin/coverage html
          .venv/bin/coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          cp coverage.xml htmlcov/coverage.xml
          cp .coverage htmlcov/.coverage
      - name: Complete coverage
        run: |
          .venv/bin/diff-cover coverage.xml --include-untracked --format github-annotations:warning
          .venv/bin/diff-quality --violations flake8 --include-untracked
          .venv/bin/diff-quality --violations pylint --include-untracked
      - name: Upload single coverage artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          if-no-files-found: error
          name: htmlcov
          path: htmlcov
          # Retention days for main branch is 90 days, for other branches is 1 day
          retention-days: ${{ github.ref == 'refs/heads/main' && 90 || 1 }}
