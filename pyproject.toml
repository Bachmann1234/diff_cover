[tool.poetry]
name = "diff_cover"
version = "9.3.2"
description = "Run coverage and linting reports on diffs"
authors = ["See Contributors"]
homepage = "https://github.com/Bachmann1234/diff-cover"
repository = "https://github.com/Bachmann1234/diff-cover"
license = "Apache-2.0"
readme = "README.rst"
classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Environment :: Console",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python :: 3.13",
        "Programming Language :: Python :: Implementation :: CPython",
        "Topic :: Software Development :: Testing",
        "Topic :: Software Development :: Quality Assurance",
]
packages = [
    { include = "diff_cover" }
]
include = [
    {path = 'templates/*.txt'},
    {path = 'templates/*.html'},
    {path = 'templates/*.css'},
    {path = 'templates/*.md'},
    {path = 'tests/*', format = 'sdist'},
]

[tool.poetry.scripts]
diff-cover = 'diff_cover.diff_cover_tool:main'
diff-quality = 'diff_cover.diff_quality_tool:main'

[tool.poetry.dependencies]
python = ">=3.9"
Pygments = "^2.19.1"
Jinja2 = ">=2.7.1"
pluggy = ">=0.13.1,<2"
chardet = ">=3.0.0"
tomli = {version = ">=1.2.1", optional = true}

[tool.poetry.group.dev.dependencies]
pytest-cov = "^6.1.1"
pytest-datadir = "^1.5.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.1"
pycodestyle = ">=2.9.1"
flake8 = "^7.2.0"
pyflakes = "^3.3.2 "
pylint = "^3.3.4"
pylint-pytest = "^1.1.8"
pydocstyle = "^6.1.1"
black = "^25.1.0"
isort = "^6.0.1"
doc8 = "1.1.2"
ruff = "^0.11.10"

[tool.poetry.extras]
toml = ["tomli"]

[build-system]
requires = ["poetry-core>=1.0.7"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
relative_files = true
parallel = true
concurrency = ["multiprocessing"]
source = ["diff_cover"]
omit = ["./tests/*"]

[tool.coverage.report]
show_missing = true
exclude_also = [
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
    "if __name__ == \"__main__\":",
    "raise NotImplementedError",
    "raise AssertionError",
    "^\\s*pass\\s*$",
]

[tool.coverage.html]
show_contexts = true
skip_covered = false

[tool.pytest.ini_options]
addopts = "--strict-markers"
xfail_strict = true
markers = [
    "disable_all_files_exist: disables the fixture patch_so_all_files_exist",
]

[tool.doc8]
max_line_length = 120

[tool.ruff]
line-length = 88
target-version = "py39"
src = ["diff_cover", "tests"]
exclude = ["tests/fixtures/*"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Disable all annotations
    "ANN",
    # allow TODO comments (equivalent to "fixme")
    "FIX",
    "TD",

    "D200",  # Disables One-line docstring should fit on one line
    "D203",
    "D205",  # Disables 1 blank line required between summary line and description
    "D212",  # Disables Multi-line docstring summary should start at the first line
    "D213",
    "D400",  # Disables First line should end with a period
    "D401",  # Disables First line of docstring should be in imperative mood
    "D415",  # Disables First line should end with a period, question mark, or exclamation point
    "D417",  # Disables Missing argument descriptions in the docstring
    
    # allow disables (equivalent to "locally-disabled", "suppressed-message")
    "RUF100",
    
    # allow classes and functions w/o docstring (equivalent to "missing-docstring")
    "D1",
    
    # hard number checks (equivalent to "too-many-*" rules)
    "C901",  # complexity
    "PLR0912",  # too many branches
    "PLR0913",  # too many arguments
    "PLR0914",  # too many locals
    "PLR0915",  # too many statements
    "PLR0916",  # too many nested blocks
    "PLR0904",  # too many public methods
    
    # duplicate code detection (equivalent to "duplicate-code")
    "CPY",
    
    # we are a command line tool (equivalent to "raise-missing-from")
    "B904",
    
    "E501",  # Line too long
    "PTH",
    
    # Avoid formatter conflicts
    "COM812",
]

# The equivalent of pylint's good-names
allowed-confusables = ["_"]

[tool.ruff.lint.pep8-naming]
# Allow specific names that might otherwise violate naming conventions
ignore-names = ["i", "e", "ex", "setUp", "tearDown"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Disables Assert statements
    "PLR2004", # Disables Magic value
    "PT011",   # Disables Exception is too broad
    "RUF012",  # Disables Mutable class attributes should be annotated with typing.ClassVar
    "S314",    # Disables xml security checks
    "SLF001",  # Disables complains about accessing private members/methods
]

[tool.ruff.lint.pydocstyle]
# Equivalent to pylint's no-docstring-rgx
ignore-decorators = ["^_"]

[tool.ruff.lint.isort]
case-sensitive = false
combine-as-imports = true
known-first-party = ["diff_cover", "tests"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
lines-after-imports = -1
split-on-trailing-comma = false
